@model GYMappWeb.ViewModels.TblMemberShipFreeze.SaveTblMemberShipFreezeViewModel

@{
    ViewData["Title"] = "Create Membership Freeze";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .card {
        /* Keep consistent styling */
    }

    #freezeDetailsGrid, #freezeRecordsGrid {
        max-height: 0;
        opacity: 0;
        overflow: hidden;
        transition: max-height 1.2s cubic-bezier(0.4, 0, 0.2, 1), opacity 1s ease-in-out;
        display: block;
    }

        #freezeDetailsGrid.visible, #freezeRecordsGrid.visible {
            max-height: 2000px; /* Increased to accommodate content */
            opacity: 1;
        }

    #freezeDetailsGridBody tr, #freezeRecordsGridBody tr {
        display: table-row !important;
    }

    .freeze-table {
        margin-bottom: 20px;
    }

    /* Ensure form-floating labels work with Flatpickr */
    .form-floating > .form-control:not(:placeholder-shown) ~ label {
        opacity: .65;
        transform: scale(.85) translateY(-0.5rem) translateX(0.15rem);
    }

    /* Alert styling */
    .freeze-alert {
        position: fixed;
        top: 20px;
        left: 50%;
        transform: translateX(-50%);
        z-index: 1100;
        min-width: 400px;
    }

    /* Membership search dropdown styling */
    #membershipSearchResults {
        width: 100%;
        max-height: 250px;
        overflow-y: auto;
        border: 1px solid #444;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);
        z-index: 1000;
        background-color: #000 !important;
        color: #fff;
    }

        #membershipSearchResults .dropdown-item {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border: none;
            text-align: left;
            width: 100%;
            background: none;
            color: #fff !important;
        }

            #membershipSearchResults .dropdown-item:hover,
            #membershipSearchResults .dropdown-item:focus {
                background-color: #2d2d2d !important;
                color: #fff !important;
            }

            #membershipSearchResults .dropdown-item.active {
                background-color: #0d6efd !important;
                color: white !important;
            }

        #membershipSearchResults .text-muted {
            padding: 0.5rem 1rem;
            color: #adb5bd !important;
        }

    /* Make sure the search input matches the dark theme */
    #membershipSearchInput {
        background-color: #000;
        color: #fff;
        border-color: #444;
    }

        #membershipSearchInput:focus {
            background-color: #000;
            color: #fff;
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }
</style>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-dark text-white">
                    <h2 class="mb-0" data-en="Create New Membership Freeze" data-ar="إنشاء تجميد اشتراك جديد">Create New Membership Freeze</h2>
                </div>
                <div class="card-body">
                    <form asp-action="Create" id="freezeForm">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

                        <div class="row g-3">
                            <div class="col-md-12">
                                <div class="form-floating user-search-container">
                                    <select asp-for="UserMemberShipId" class="form-select" id="userMembershipSelect" style="display: none;">
                                        <option value="" data-en="-- Select Membership --" data-ar="-- اختر الاشتراك --">-- Select Membership --</option>
                                        @foreach (var item in ViewBag.UserMemberShipId)
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }
                                    </select>
                                    <input type="text" id="membershipSearchInput" class="form-control" placeholder="Search memberships..."
                                           data-en="Search memberships..." data-ar="ابحث عن الاشتراكات...">
                                    <label asp-for="UserMemberShipId" class="form-label" data-en="Membership" data-ar="الاشتراك">Membership</label>
                                    <div id="membershipSearchResults" class="dropdown-menu" style="display: none; max-height: 250px; overflow-y: auto; background-color: #000; color: #fff;"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Membership Freeze Summary Grid -->
                        <div class="mt-4 freeze-table" id="freezeDetailsGrid">
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th data-en="Freeze Count" data-ar="عدد مرات التجميد">Freeze Count</th>
                                        <th data-en="Remaining Freeze Count" data-ar="عدد مرات التجميد المتبقية">Remaining Freeze Count</th>
                                        <th data-en="Total Freeze Days" data-ar="إجمالي أيام التجميد">Total Freeze Days</th>
                                        <th data-en="Remaining Freeze Days" data-ar="أيام التجميد المتبقية">Remaining Freeze Days</th>
                                    </tr>
                                </thead>
                                <tbody id="freezeDetailsGridBody"></tbody>
                            </table>
                        </div>

                        <div class="row g-3 mt-3">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input asp-for="FreezeStartDate" class="form-control flatpickr-input" placeholder=" " id="freezeStartDate" />
                                    <label asp-for="FreezeStartDate" class="form-label" data-en="Start Date" data-ar="تاريخ البداية">Start Date</label>
                                    <span asp-validation-for="FreezeStartDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input asp-for="FreezeEndDate" class="form-control flatpickr-input" placeholder=" " id="freezeEndDate" />
                                    <label asp-for="FreezeEndDate" class="form-label" data-en="End Date" data-ar="تاريخ النهاية">End Date</label>
                                    <span asp-validation-for="FreezeEndDate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mt-3">
                            <div class="col-md-12">
                                <div class="form-floating">
                                    <input asp-for="Reason" class="form-control" placeholder=" " />
                                    <label asp-for="Reason" class="form-label" data-en="Reason" data-ar="السبب">Reason</label>
                                    <span asp-validation-for="Reason" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <!-- Freeze Records Grid -->
                        <div class="mt-4 freeze-table" id="freezeRecordsGrid">
                            <h5 data-en="Previous Freeze Records" data-ar="سجلات التجميد السابقة">Previous Freeze Records</h5>
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th data-en="Start Date" data-ar="تاريخ البداية">Start Date</th>
                                        <th data-en="End Date" data-ar="تاريخ النهاية">End Date</th>
                                        <th data-en="Duration (Days)" data-ar="المدة (أيام)">Duration (Days)</th>
                                        <th data-en="Reason" data-ar="السبب">Reason</th>
                                    </tr>
                                </thead>
                                <tbody id="freezeRecordsGridBody"></tbody>
                            </table>
                        </div>

                        <div class="mt-4">
                            <button type="submit" class="btn btn-dark btn-lg" id="submitButton" data-en="Create Freeze" data-ar="إنشاء التجميد">Create Freeze</button>
                            <a asp-action="Index" class="btn btn-outline-secondary btn-lg ms-2" data-en="Back to List" data-ar="العودة إلى القائمة">Back to List</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function() {
            // Update select options based on language
            function updateSelectOptions() {
                const currentLanguage = localStorage.getItem('preferredLanguage') || 'en';
                $('option[data-en], option[data-ar]').each(function() {
                    const textAttr = `data-${currentLanguage}`;
                    if ($(this).attr(textAttr)) {
                        $(this).text($(this).attr(textAttr));
                    }
                });

                // Update search input placeholders
                const $membershipSearchInput = $('#membershipSearchInput');

                if ($membershipSearchInput.length) {
                    const membershipPlaceholder = currentLanguage === 'ar' ?
                        $membershipSearchInput.data('ar') : $membershipSearchInput.data('en');
                    $membershipSearchInput.attr('placeholder', membershipPlaceholder);
                }
            }

            // Variables to store freeze periods and date pickers
            let freezePeriods = [];
            let startDatePicker, endDatePicker;
            const $summaryGrid = $('#freezeDetailsGrid');
            const $summaryGridBody = $('#freezeDetailsGridBody');
            const $recordsGrid = $('#freezeRecordsGrid');
            const $recordsGridBody = $('#freezeRecordsGridBody');
            let isInitialLoad = true;
            let freezeDetails = {}; // To store current membership freeze details

            // Membership search functionality
            function initializeMembershipSearch() {
                const $membershipSelect = $('#userMembershipSelect');
                const $searchInput = $('#membershipSearchInput');
                const $searchResults = $('#membershipSearchResults');
                let selectedIndex = -1;

                // Get all membership options from the hidden select
                const allMemberships = [];
                $membershipSelect.find('option').each(function() {
                    if ($(this).val()) {
                        const optionText = $(this).text();

                        allMemberships.push({
                            id: $(this).val(),
                            text: optionText,
                            // The text now contains user code in format: "UserName (UserCode) - MembershipType"
                            code: optionText.match(/\(([^)]+)\)/)?.[1] || '' // Extract user code from parentheses
                        });
                    }
                });

                console.log('All memberships with codes:', allMemberships);

                function populateResults(memberships) {
                    $searchResults.empty();

                    if (memberships.length === 0) {
                        $searchResults.append('<div class="dropdown-item text-muted">No memberships found</div>');
                        return;
                    }

                    memberships.forEach((membership, index) => {
                        const $item = $(`
                            <button type="button" class="dropdown-item" data-value="${membership.id}" data-index="${index}">
                                ${membership.text}
                            </button>
                        `);

                        $item.on('click', function() {
                            selectMembership(membership.id, membership.text);
                        });

                        $searchResults.append($item);
                    });
                }

                function selectMembership(membershipId, membershipText) {
                    $membershipSelect.val(membershipId);
                    $searchInput.val(membershipText);
                    $searchResults.hide();
                    selectedIndex = -1;

                    // MANUALLY trigger the load since programmatic value change doesn't trigger the change event
                    loadMembershipFreezeDetails(membershipId);
                }

                function filterMemberships(searchTerm) {
                    if (!searchTerm) {
                        return allMemberships;
                    }

                    const term = searchTerm.toLowerCase().trim();
                    console.log('Searching for:', term);

                    return allMemberships.filter(membership => {
                        const membershipText = (membership.text || '').toLowerCase();
                        const userCode = (membership.code || '').toLowerCase();

                        console.log('Checking:', membershipText, 'Code:', userCode);

                        // Search in both the full text and the user code
                        return membershipText.includes(term) || userCode.includes(term);
                    });
                }

                // Event handlers
                $searchInput.on('input', function() {
                    const searchTerm = $(this).val();
                    console.log('Input changed to:', searchTerm);

                    const filteredMemberships = filterMemberships(searchTerm);
                    console.log('Filtered results:', filteredMemberships);

                    populateResults(filteredMemberships);
                    $searchResults.show();
                    selectedIndex = -1;
                });

                $searchInput.on('focus', function() {
                    if ($(this).val() === '') {
                        populateResults(allMemberships);
                    }
                    $searchResults.show();
                });

                $searchInput.on('keydown', function(e) {
                    const $items = $searchResults.find('.dropdown-item');

                    switch(e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            selectedIndex = Math.min(selectedIndex + 1, $items.length - 1);
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            selectedIndex = Math.max(selectedIndex - 1, -1);
                            break;
                        case 'Enter':
                            e.preventDefault();
                            if (selectedIndex >= 0 && selectedIndex < $items.length) {
                                $items.eq(selectedIndex).click();
                            }
                            break;
                        case 'Escape':
                            $searchResults.hide();
                            selectedIndex = -1;
                            break;
                        case 'Tab':
                            $searchResults.hide();
                            selectedIndex = -1;
                            break;
                        default:
                            return;
                    }

                    $items.removeClass('active');
                    if (selectedIndex >= 0) {
                        $items.eq(selectedIndex).addClass('active');
                        $items.eq(selectedIndex)[0].scrollIntoView({ block: 'nearest' });
                    }
                });

                $(document).on('click', function(e) {
                    if (!$searchInput.is(e.target) && !$searchResults.is(e.target) &&
                        $searchResults.has(e.target).length === 0) {
                        $searchResults.hide();
                    }
                });

                // Initialize with all memberships
                populateResults(allMemberships);
            }

            // Function to show alert message
            function showAlert(message, type = 'danger') {
                // Remove any existing alerts
                $('.freeze-alert').remove();

                // Create new alert
                const alertHtml = `
                    <div class="alert alert-${type} freeze-alert alert-dismissible fade show" role="alert">
                        ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    </div>
                `;

                $('body').append(alertHtml);

                // Auto-dismiss after 5 seconds
                setTimeout(() => {
                    $('.freeze-alert').alert('close');
                }, 5000);
            }

            // Function to get localized message
            function getLocalizedMessage(key) {
                const currentLanguage = localStorage.getItem('preferredLanguage') || 'en';
                const messages = {
                    'overlap': {
                        'en': 'There is an overlap with existing freeze periods',
                        'ar': 'هناك تداخل في تواريخ التجميد مع فترات تجميد موجودة مسبقاً'
                    },
                    'selectMembership': {
                        'en': 'Please select a membership first',
                        'ar': 'يرجى اختيار الاشتراك أولاً'
                    },
                    'selectDates': {
                        'en': 'Please select both start and end dates',
                        'ar': 'يرجى اختيار تاريخ البداية والنهاية'
                    },
                    'noFreezeCounts': {
                        'en': 'No remaining freeze counts available for this membership',
                        'ar': 'لا توجد مرات تجميد متبقية لهذا الاشتراك'
                    },
                    'noFreezeDays': {
                        'en': 'No remaining freeze days available for this membership',
                        'ar': 'لا توجد أيام تجميد متبقية لهذا الاشتراك'
                    },
                    'endDateAfterStart': {
                        'en': 'End date must be after start date',
                        'ar': 'يجب أن يكون تاريخ النهاية بعد تاريخ البداية'
                    }
                };

                return messages[key]?.[currentLanguage] || messages[key]?.['en'] || key;
            }

            // Function to format date as YYYY-MM-DD
            function formatDate(date) {
                return date.toISOString().split('T')[0];
            }

            // Function to calculate days between dates
            function calculateDays(startDate, endDate) {
                const start = new Date(startDate);
                const end = new Date(endDate);
                const diffTime = Math.abs(end - start);
                return Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // Inclusive of both dates
            }

            // Function to update date picker disabled dates
            function updateDatePickerDisabledDates() {
                const disabledRanges = freezePeriods.map(period => ({
                    from: formatDate(period.from),
                    to: formatDate(period.to)
                }));

                if (startDatePicker) {
                    startDatePicker.set('disable', disabledRanges);
                }
                if (endDatePicker) {
                    endDatePicker.set('disable', disabledRanges);
                }
            }

            // Function to toggle grid visibility
            function toggleGrid($grid, show) {
                if (show) {
                    // Force reflow before adding class to trigger animation
                    $grid[0].scrollHeight;
                    $grid.addClass('visible');
                } else {
                    $grid.removeClass('visible');
                }
            }

            // Function to load membership freeze details
            function loadMembershipFreezeDetails(userMembershipId) {
                console.log('Loading details for membership:', userMembershipId);

                if (!userMembershipId) {
                    toggleGrid($summaryGrid, false);
                    toggleGrid($recordsGrid, false);
                    freezePeriods = []; // Clear frozen periods
                    updateDatePickerDisabledDates();
                    freezeDetails = {};
                    return;
                }

                // Show loading states
                $summaryGridBody.html('<tr><td colspan="4" class="text-center">Loading summary...</td></tr>');
                $recordsGridBody.html('<tr><td colspan="4" class="text-center">Loading records...</td></tr>');

                // Show grids with animation
                toggleGrid($summaryGrid, true);
                toggleGrid($recordsGrid, true);

                // Fetch membership summary details
                $.get(`/TblMemberShipFreezes/GetMembershipFreezeDetails?userMembershipId=${userMembershipId}`, function(summaryData) {
                    console.log('Summary data received:', summaryData);
                    if (summaryData) {
                        freezeDetails = summaryData; // Store the details
                        $summaryGridBody.html(`
                            <tr>
                                <td>${summaryData.freezeCount || 0}</td>
                                <td>${summaryData.remainingFreezeCount || 0}</td>
                                <td>${summaryData.totalFreezeDays || 0}</td>
                                <td>${summaryData.remainingFreezeDays || 0}</td>
                            </tr>
                        `);
                    }
                }).fail(function(error) {
                    console.error('Error loading summary:', error);
                    $summaryGridBody.html('<tr><td colspan="4" class="text-center text-danger">Error loading summary</td></tr>');
                });

                // Fetch freeze records
                $.get(`/TblMemberShipFreezes/GetFreezeRecords?userMembershipId=${userMembershipId}`, function(recordsData) {
                    console.log('Records data received:', recordsData);
                    freezePeriods = []; // Reset frozen periods

                    if (recordsData && recordsData.length > 0) {
                        let recordsHtml = '';
                        recordsData.forEach(record => {
                            const duration = calculateDays(record.freezeStartDate, record.freezeEndDate);
                            recordsHtml += `
                                <tr>
                                    <td>${record.freezeStartDate}</td>
                                    <td>${record.freezeEndDate}</td>
                                    <td>${duration}</td>
                                    <td>${record.reason || '--'}</td>
                                </tr>
                            `;

                            // Add to freeze periods (only if dates are valid)
                            const startDate = new Date(record.freezeStartDate);
                            const endDate = new Date(record.freezeEndDate);
                            if (!isNaN(startDate.getTime()) && !isNaN(endDate.getTime())) {
                                freezePeriods.push({
                                    from: startDate,
                                    to: endDate
                                });
                            }
                        });
                        $recordsGridBody.html(recordsHtml);
                    } else {
                        $recordsGridBody.html('<tr><td colspan="4" class="text-center">No freeze records found</td></tr>');
                    }

                    // Update date picker disabled dates
                    updateDatePickerDisabledDates();
                }).fail(function(error) {
                    console.error('Error loading records:', error);
                    $recordsGridBody.html('<tr><td colspan="4" class="text-center text-danger">Error loading records</td></tr>');
                });
            }

            // Initialize Flatpickr with dark theme and date restrictions
            try {
                startDatePicker = flatpickr("#freezeStartDate", {
                    minDate: "today",
                    dateFormat: "Y-m-d",
                    theme: "dark",
                    allowInput: true,
                    onChange: function(selectedDates, dateStr) {
                        if (endDatePicker) {
                            endDatePicker.set("minDate", dateStr);
                            if (endDatePicker.selectedDates[0] && new Date(dateStr) >= endDatePicker.selectedDates[0]) {
                                endDatePicker.clear();
                            }
                        }
                        // Trigger validation
                        $("#freezeStartDate").trigger("change");
                    }
                });

                endDatePicker = flatpickr("#freezeEndDate", {
                    minDate: "today",
                    dateFormat: "Y-m-d",
                    theme: "dark",
                    allowInput: true,
                    onChange: function() {
                        // Trigger validation
                        $("#freezeEndDate").trigger("change");
                    }
                });
            } catch (error) {
                console.error('Error initializing Flatpickr:', error);
            }

            // Manual change event handler for the membership select
            $('#userMembershipSelect').on('change', function() {
                loadMembershipFreezeDetails($(this).val());
            });

            // Initialize membership search
            console.log('Initializing membership search...');
            initializeMembershipSearch();

            // Form submission handler
            $('#freezeForm').on('submit', function(e) {
                e.preventDefault(); // Prevent default submission

                // Check if we have freeze details
                if (!freezeDetails || Object.keys(freezeDetails).length === 0) {
                    showAlert(getLocalizedMessage('selectMembership'));
                    return false;
                }

                // Get selected dates
                const startDate = $('#freezeStartDate').val();
                const endDate = $('#freezeEndDate').val();

                // Check if dates are selected
                if (!startDate || !endDate) {
                    showAlert(getLocalizedMessage('selectDates'));
                    return false;
                }

                // Calculate requested freeze days
                const requestedDays = calculateDays(startDate, endDate);

                // Check remaining freeze count
                if (freezeDetails.remainingFreezeCount <= 0) {
                    showAlert(getLocalizedMessage('noFreezeCounts'));
                    return false;
                }

                // Check remaining freeze days
                if (freezeDetails.remainingFreezeDays <= 0) {
                    showAlert(getLocalizedMessage('noFreezeDays'));
                    return false;
                }

                // Check if requested days exceed remaining days
                if (requestedDays > freezeDetails.remainingFreezeDays) {
                    const currentLanguage = localStorage.getItem('preferredLanguage') || 'en';
                    const message = currentLanguage === 'ar'
                        ? `لديك فقط ${freezeDetails.remainingFreezeDays} يوم تجميد متبقي، لكنك طلبت ${requestedDays} يوم`
                        : `You only have ${freezeDetails.remainingFreezeDays} remaining freeze days, but requested ${requestedDays} days`;

                    showAlert(message);
                    return false;
                }

                // Check for date overlaps on the client side as well
                const start = new Date(startDate);
                const end = new Date(endDate);

                let hasOverlap = false;
                for (const period of freezePeriods) {
                    if (start <= period.to && end >= period.from) {
                        hasOverlap = true;
                        break;
                    }
                }

                if (hasOverlap) {
                    showAlert(getLocalizedMessage('overlap'));
                    return false;
                }

                // If all checks pass, submit the form
                this.submit();
            });

            // Initialize
            toggleGrid($summaryGrid, false);
            toggleGrid($recordsGrid, false);
            isInitialLoad = false;

            // Date validation
            $('#freezeStartDate, #freezeEndDate').on('change', function() {
                var startDate = new Date($('#freezeStartDate').val());
                var endDate = new Date($('#freezeEndDate').val());

                if (startDate && endDate && endDate <= startDate) {
                    if (endDatePicker) {
                        endDatePicker.clear();
                    }
                    showAlert(getLocalizedMessage('endDateAfterStart'));
                }
            });

            // Update select options based on language
            updateSelectOptions();

            // Debug logs
            console.log('Flatpickr instances initialized');
            console.log('Summary grid exists:', $summaryGrid.length);
            console.log('Records grid exists:', $recordsGrid.length);

            // Trigger change if there's a preselected value
            if ($('#userMembershipSelect').val()) {
                loadMembershipFreezeDetails($('#userMembershipSelect').val());
            }
        });
    </script>
}