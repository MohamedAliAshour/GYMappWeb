@model GYMappWeb.ViewModels.TblUserMemberShip.SaveTblUserMemberShipViewModel

@{
    ViewData["Title"] = "Create Membership";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .card {
        /* Remove transition but keep other styles if any exist */
    }

    #membershipGrid {
        opacity: 0;
        display: none;
        overflow: hidden; /* Add this to prevent content clipping during animation */
    }

        #membershipGrid.visible {
            opacity: 1;
        }

    #membershipGridBody tr {
        display: table-row !important;
    }

    /* Improved dropdown styling with black theme */
    .user-search-container {
        position: relative;
    }

    #userSearchInput.form-select {
        background-image: none;
        cursor: text;
    }

    #userSearchResults {
        width: 100%;
        max-height: 250px;
        overflow-y: auto;
        border: 1px solid #444;
        border-radius: 0.375rem;
        box-shadow: 0 0.5rem 1rem rgba(0, 0, 0, 0.3);
        z-index: 1000;
        background-color: #000 !important;
        color: #fff;
    }

        #userSearchResults .dropdown-item {
            padding: 0.5rem 1rem;
            cursor: pointer;
            border: none;
            text-align: left;
            width: 100%;
            background: none;
            color: #fff !important;
        }

            #userSearchResults .dropdown-item:hover,
            #userSearchResults .dropdown-item:focus {
                background-color: #2d2d2d !important;
                color: #fff !important;
            }

            #userSearchResults .dropdown-item.active {
                background-color: #0d6efd !important;
                color: white !important;
            }

        #userSearchResults .text-muted {
            padding: 0.5rem 1rem;
            color: #adb5bd !important;
        }

    /* Make sure the search input matches the dark theme */
    #userSearchInput {
        background-color: #000;
        color: #fff;
        border-color: #444;
    }

        #userSearchInput:focus {
            background-color: #000;
            color: #fff;
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.2rem rgba(13, 110, 253, 0.25);
        }

</style>

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <div class="card-header bg-dark text-white">
                    <h2 class="mb-0" data-en="Create New Membership" data-ar="إنشاء اشتراك جديد">Create New Membership</h2>
                </div>
                <div class="card-body">
                    <form asp-action="Create">
                        <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

                        <div class="row g-3">
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input asp-for="StartDate" class="form-control" id="startDateInput" type="text" readonly value="@DateTime.Today.ToString("yyyy-MM-dd")" />
                                    <label asp-for="StartDate" class="form-label" data-en="Start Date" data-ar="تاريخ البداية">Start Date</label>
                                    <span asp-validation-for="StartDate" class="text-danger"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-floating">
                                    <input asp-for="EndDate" class="form-control" id="endDateInput" autocomplete="off" readonly />
                                    <label asp-for="EndDate" class="form-label" data-en="End Date" data-ar="تاريخ النهاية">End Date</label>
                                    <span asp-validation-for="EndDate" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row g-3 mt-3">
                            <div class="col-md-4">
                                <div class="form-floating">
                                    <select asp-for="OffId" class="form-select" id="offIdSelect">
                                        <option value="" data-en="--Select--" data-ar="--اختر--">--Select--</option>
                                        <!-- Options will be populated dynamically -->
                                    </select>
                                    <label asp-for="OffId" class="form-label" data-en="Offer" data-ar="العرض">Offer</label>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-floating user-search-container">
                                    <select asp-for="UserId" class="form-select" id="userIdSelect" style="display: none;">
                                        <option value="" data-en="--Select--" data-ar="--اختر--">--Select--</option>
                                        @foreach (var item in ViewBag.UserId)
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }
                                    </select>
                                    <input type="text" id="userSearchInput" class="form-control" placeholder="Search users..."
                                           data-en="Search users..." data-ar="ابحث عن المستخدمين...">
                                    <label asp-for="UserId" class="form-label" data-en="User" data-ar="المستخدم">User</label>
                                    <div id="userSearchResults" class="dropdown-menu" style="display: none; max-height: 250px; overflow-y: auto; background-color: #000; color: #fff;"></div>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-floating">
                                    <select asp-for="MemberShipTypesId" class="form-select" id="membershipTypeDropdown">
                                        <option value="" data-en="--Select--" data-ar="--اختر--">--Select--</option>
                                        @foreach (var item in ViewBag.MemberShipTypesId)
                                        {
                                            <option value="@item.Value">@item.Text</option>
                                        }
                                    </select>
                                    <label asp-for="MemberShipTypesId" class="form-label" data-en="Membership Type" data-ar="نوع الاشتراك">Membership Type</label>
                                    <span asp-validation-for="MemberShipTypesId" class="text-danger"></span>
                                </div>
                            </div>
                        </div>

                        <!-- Update the table headers in your HTML -->
                        <div class="mt-4" id="membershipGrid">
                            <table class="table table-bordered table-hover">
                                <thead class="table-dark">
                                    <tr>
                                        <th data-en="Username" data-ar="اسم المستخدم">Username</th>
                                        <th data-en="Membership" data-ar="الاشتراك">Membership</th>
                                        <th data-en="Price" data-ar="السعر">Price</th>
                                        <th data-en="Discount%" data-ar="نسبة الخصم">Discount%</th>
                                        <th data-en="Price" data-ar="السعر">Price</th>
                                        <th data-en="Invitation" data-ar="الدعوة">Invitation</th>
                                        <th data-en="Freeze Days" data-ar="أيام التجميد">Freeze Days</th>
                                        <th data-en="Freeze Count" data-ar="عدد مرات التجميد">Freeze Count</th>
                                    </tr>
                                </thead>
                                <tbody id="membershipGridBody"></tbody>
                            </table>
                        </div>
                        <div class="mt-4" id="buttonContainer">
                            <button type="submit" class="btn btn-dark btn-lg" data-en="Create Membership" data-ar="إنشاء الاشتراك">Create Membership</button>
                            <a asp-action="Index" class="btn btn-outline-secondary btn-lg ms-2" data-en="Back to List" data-ar="العودة إلى القائمة">Back to List</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")

    <script>
        $(document).ready(function () {
            const membershipDurations = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.MembershipDurations))');
            const membershipDetails = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.MembershipDetails))');
            const userDetailsData = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.UserDetails))') || [];
            const offerDetails = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.OfferDetails))');
            const membershipFeatures = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.MembershipFeatures))') || {};
            const gymBranchId = @(ViewBag.GymBranchId ?? 1);

            const $grid = $('#membershipGrid');
            const $gridBody = $('#membershipGridBody');
            const allOffers = @Html.Raw(Json.Serialize(ViewBag.AllOffers));

            // Process user data to ensure consistent structure
            const allUsers = userDetailsData.map(user => ({
                id: user.id || user.userId || user.UserId,
                name: user.name || user.userName || user.UserName,
                code: user.code || user.userCode || user.UserCode || ''
            }));
            console.log('Processed users:', allUsers);

            let filteredUsers = [...allUsers];

            $grid.hide().removeClass('visible');
            let isInitialLoad = true;

            // User search functionality
            function initializeUserSearch() {
                const $userSelect = $('#userIdSelect');
                const $searchInput = $('#userSearchInput');
                const $searchResults = $('#userSearchResults');
                let selectedIndex = -1;

                // Style to look like a dropdown
                $searchInput.addClass('form-select');
                $searchResults.addClass('dropdown-menu show w-100');

                function populateResults(users) {
                    $searchResults.empty();

                    if (users.length === 0) {
                        $searchResults.append('<div class="dropdown-item text-muted">No users found</div>');
                        return;
                    }

                    users.forEach((user, index) => {
                        const displayText = user.code ? `${user.name} (${user.code})` : user.name;
                        const $item = $(`
                            <button type="button" class="dropdown-item" data-value="${user.id}" data-index="${index}">
                                ${displayText}
                            </button>
                        `);

                        $item.on('click', function() {
                            selectUser(user.id, user.name, user.code);
                        });

                        $searchResults.append($item);
                    });
                }

                function selectUser(userId, userName, userCode) {
                    $userSelect.val(userId);
                    const displayText = userCode ? `${userName} (${userCode})` : userName;
                    $searchInput.val(displayText);
                    $searchResults.hide();
                    selectedIndex = -1;
                    $userSelect.trigger('change');
                }

                function filterUsers(searchTerm) {
                    if (!searchTerm) {
                        return allUsers;
                    }

                    const term = searchTerm.toLowerCase().trim();
                    return allUsers.filter(user => {
                        const userName = (user.name || '').toLowerCase();
                        const userCode = (user.code || '').toString().toLowerCase();

                        return userName.includes(term) || userCode.includes(term);
                    });
                }

                // Event handlers
                $searchInput.on('input', function() {
                    const searchTerm = $(this).val();
                    filteredUsers = filterUsers(searchTerm);
                    populateResults(filteredUsers);
                    $searchResults.show();
                    selectedIndex = -1;
                });

                $searchInput.on('focus', function() {
                    if ($(this).val() === '') {
                        populateResults(allUsers);
                    }
                    $searchResults.show();
                });

                $searchInput.on('keydown', function(e) {
                    const $items = $searchResults.find('.dropdown-item');

                    switch(e.key) {
                        case 'ArrowDown':
                            e.preventDefault();
                            selectedIndex = Math.min(selectedIndex + 1, $items.length - 1);
                            break;
                        case 'ArrowUp':
                            e.preventDefault();
                            selectedIndex = Math.max(selectedIndex - 1, -1);
                            break;
                        case 'Enter':
                            e.preventDefault();
                            if (selectedIndex >= 0 && selectedIndex < $items.length) {
                                $items.eq(selectedIndex).click();
                            }
                            break;
                        case 'Escape':
                            $searchResults.hide();
                            selectedIndex = -1;
                            break;
                        case 'Tab':
                            $searchResults.hide();
                            selectedIndex = -1;
                            break;
                        default:
                            return;
                    }

                    $items.removeClass('active');
                    if (selectedIndex >= 0) {
                        $items.eq(selectedIndex).addClass('active');
                        $items.eq(selectedIndex)[0].scrollIntoView({ block: 'nearest' });
                    }
                });

                $(document).on('click', function(e) {
                    if (!$searchInput.is(e.target) && !$searchResults.is(e.target) &&
                        $searchResults.has(e.target).length === 0) {
                        $searchResults.hide();
                    }
                });

                // Initialize with all users
                populateResults(allUsers);
            }

            // Function to update option text based on language
            function updateSelectOptions() {
                const currentLanguage = localStorage.getItem('preferredLanguage') || 'en';
                $('option[data-en], option[data-ar]').each(function() {
                    const textAttr = `data-${currentLanguage}`;
                    if ($(this).attr(textAttr)) {
                        $(this).text($(this).attr(textAttr));
                    }
                });

                // Update search input placeholder
                const $searchInput = $('#userSearchInput');
                const placeholder = currentLanguage === 'ar' ?
                    $searchInput.data('ar') : $searchInput.data('en');
                $searchInput.attr('placeholder', placeholder);
            }

            // Function to filter offers based on membership type
            function filterOffers(membershipTypeId) {
                const $offIdSelect = $('#offIdSelect');
                $offIdSelect.empty();
                $offIdSelect.append('<option value="" data-en="--Select--" data-ar="--اختر--">--Select--</option>');

                if (!membershipTypeId) {
                    // If no membership type selected, show all ACTIVE offers
                    allOffers.forEach(offer => {
                        $offIdSelect.append(`<option value="${offer.value}">${offer.text}</option>`);
                    });

                    // Only update grid if not initial load
                    if (!isInitialLoad) {
                        updateGrid();
                    }
                    return;
                }

                // Filter offers that match the selected membership type (all offers are already active)
                const filteredOffers = allOffers.filter(offer => {
                    const offerData = offerDetails.find(o => o.id == offer.value);
                    return !offerData || !offerData.membershipTypeId || offerData.membershipTypeId == membershipTypeId;
                });

                filteredOffers.forEach(offer => {
                    $offIdSelect.append(`<option value="${offer.value}">${offer.text}</option>`);
                });

                // Update option texts based on language
                updateSelectOptions();
                updateGrid(); // Update grid after filtering
            }

            function updateGrid() {
                const userId = $('#userIdSelect').val();
                const membershipTypeId = $('#membershipTypeDropdown').val();
                const offId = $('#offIdSelect').val();

                // Convert to numbers if not empty
                const numUserId = userId ? parseInt(userId) : null;
                const numMembershipTypeId = membershipTypeId ? parseInt(membershipTypeId) : null;
                const numOffId = offId ? parseInt(offId) : null;

                // Only expand the grid if Membership Type is selected
                if (!numMembershipTypeId) {
                    $gridBody.empty();
                    $('#endDateInput').val('');

                    // Skip animation on initial load
                    if (!isInitialLoad) {
                        $grid.stop(true, true).fadeTo(300, 0, function() {
                            $(this).slideUp(400, function() {
                                $(this).removeClass('visible');
                            });
                        });
                    } else {
                        $grid.hide().removeClass('visible');
                    }
                    return;
                }

                // Find the selected items (all are active since they're filtered on server side)
                const user = numUserId ? allUsers.find(u => u.id === numUserId) : null;
                const membership = membershipDetails.find(m => m.id === numMembershipTypeId);
                const offer = numOffId ? offerDetails.find(o => o.id === numOffId) : null;
                const features = membershipFeatures[membershipTypeId] || {};

                // Prepare data for display
                const username = user?.name ?? '--';
                const membershipName = membership?.name ?? '--';
                const price = membership?.price ? parseFloat(membership.price) : 0;
                const discountPercentage = offer?.percentage ?? 0;
                const invitationCount = features.invitationCount ?? '--';
                const totalFreezeDays = features.totalFreezeDays ?? '--';
                const freezeCount = features.freezeCount ?? '--';

                let discountedPrice = '--';
                if (offer && price > 0) {
                    discountedPrice = (price - (price * discountPercentage / 100)).toFixed(2);
                } else if (price > 0) {
                    discountedPrice = price.toFixed(2);
                }

                $gridBody.html(`
                    <tr>
                        <td>${username}</td>
                        <td>${membershipName}</td>
                        <td>${price > 0 ? price.toFixed(2) : '--'}</td>
                        <td>${discountPercentage}</td>
                        <td>${discountedPrice}</td>
                        <td>${invitationCount}</td>
                        <td>${totalFreezeDays}</td>
                        <td>${freezeCount}</td>
                    </tr>
                `);

                // Set End Date based on duration
                const durationMonths = membershipDurations[membershipTypeId.toString()];
                if (durationMonths) {
                    const startDate = new Date($('#startDateInput').val());
                    const endDate = new Date(startDate);
                    endDate.setMonth(endDate.getMonth() + parseInt(durationMonths));
                    $('#endDateInput').val(endDate.toISOString().split('T')[0]);
                }

                // Show the grid with animation only if it's not already visible
                if (!$grid.hasClass('visible')) {
                    $grid.css({
                        display: 'block',
                        height: 0,
                        opacity: 0
                    }).stop(true, true).animate({
                        height: $grid[0].scrollHeight
                    }, 800, 'swing', function() {
                        $(this).animate({
                            opacity: 1
                        }, 600, 'swing', function() {
                            $(this).addClass('visible').css('height', 'auto');
                        });
                    });
                }
            }

            // Initialize with all ACTIVE offers
            filterOffers(null);
            isInitialLoad = false;

            // Initialize user search
            initializeUserSearch();

            // Update select options based on language
            updateSelectOptions();

            // Event handlers
            $('#membershipTypeDropdown').on('change', function() {
                const membershipTypeId = $(this).val();
                filterOffers(membershipTypeId);
            });

            $('#userIdSelect, #offIdSelect').on('change', function() {
                if ($('#membershipTypeDropdown').val()) {
                    updateGrid();
                }
            });

            // Active membership validation
            $('#userIdSelect').on('change', async function() {
                const userId = $(this).val();
                if (!userId) return;

                try {
                    const response = await fetch(`/TblUserMemberShips/CheckActiveMembership?userId=${userId}`);
                    if (!response.ok) throw new Error('Network error');

                    const data = await response.json();
                    if (data.hasActiveMembership) {
                        const warningHtml = `
                            <div class="alert alert-warning alert-dismissible fade show mt-3" role="alert">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                User already has an active membership (ends ${data.endDate})
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `;

                        $('.alert-warning').remove();
                        $(this).closest('.form-floating').after(warningHtml);
                    } else {
                        $('.alert-warning').remove();
                    }
                } catch (error) {
                    console.error('Validation error:', error);
                }
            });

            // Form submission validation
            $('form').on('submit', async function(e) {
                const userId = $('#userIdSelect').val();
                if (!userId) return true;

                try {
                    const response = await fetch(`/TblUserMemberShips/CheckActiveMembership?userId=${userId}`);
                    if (!response.ok) throw new Error('Network error');

                    const data = await response.json();
                    if (data.hasActiveMembership) {
                        e.preventDefault();

                        const alertHtml = `
                            <div class="alert alert-danger alert-dismissible fade show position-fixed top-0 start-50 translate-middle-x mt-3" style="z-index: 1100;">
                                <strong>Cannot create membership:</strong> User already has an active membership (ends ${data.endDate})
                                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                            </div>
                        `;

                        $('.alert-danger').remove();
                        $('body').append(alertHtml);

                        setTimeout(() => {
                            $('.alert-danger').alert('close');
                        }, 5000);

                        return false;
                    }
                    return true;
                } catch (error) {
                    console.error('Validation error:', error);
                    return true;
                }
            });

            // Handle language changes if you have language switching
            $(document).on('languageChanged', function() {
                updateSelectOptions();
            });
        });
    </script>
}