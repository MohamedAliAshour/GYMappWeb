<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - GYMappWeb</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/GYMappWeb.styles.css" asp-append-version="true" />
    <link href="~/vendor/fontawesome-free/css/all.min.css" rel="stylesheet">

    <link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="shortcut icon" href="/favicon.ico" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <style>
        /* Animation Styles */
        .animate-container {
            opacity: 0;
            animation: fadeIn 0.5s ease-out forwards;
        }

        .animate-card {
            opacity: 0;
            transform: translateY(30px);
            transition: all 0.6s cubic-bezier(0.25, 0.46, 0.45, 0.94);
        }

            .animate-card.animated {
                opacity: 1;
                transform: translateY(0);
            }

        .delay-1 {
            transition-delay: 0.1s;
        }

        .delay-2 {
            transition-delay: 0.2s;
        }

        .delay-3 {
            transition-delay: 0.3s;
        }

        .delay-4 {
            transition-delay: 0.4s;
        }

        .delay-5 {
            transition-delay: 0.5s;
        }

        @@keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        /* Login Specific Styles */
        .glass-card {
            background: rgba(255, 255, 255, 0.15);
            backdrop-filter: blur(10px);
            border-radius: 15px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            box-shadow: 0 8px 32px 0 rgba(31, 38, 135, 0.15);
            color: white;
        }

        .card-header {
            background: rgba(255, 255, 255, 0.3);
            border-bottom: 1px solid rgba(255, 255, 255, 0.4);
            border-radius: 15px 15px 0 0 !important;
        }

        .btn-provider {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white;
            transition: all 0.3s ease;
        }

            .btn-provider:hover {
                background: rgba(255, 255, 255, 0.3);
            }

        /* Form controls */
        .form-control {
            background: rgba(255, 255, 255, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.3);
            color: white !important;
        }

            .form-control::placeholder {
                color: rgba(255, 255, 255, 0.7) !important;
                opacity: 1 !important;
            }

            .form-control:focus {
                background: rgba(255, 255, 255, 0.3);
                border-color: rgba(255, 255, 255, 0.5);
            }

        /* Language Toggle Button Styles - MODIFIED TO MAKE AR FRONT */
        .lang-toggle-container {
            position: relative;
            width: 60px;
            height: 30px;
            margin-left: 20px;
        }

        .lang-btn {
            position: absolute;
            width: 100%;
            height: 100%;
            display: flex;
            justify-content: center;
            align-items: center;
            border-radius: 15px;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: transform 0.4s ease, z-index 0.4s ease;
            backface-visibility: hidden;
            border: none;
            font-size: 0.9rem;
        }

        /* AR button is now in front */
        .lang-btn-ar {
            background: linear-gradient(45deg, #b21f1f, #fdbb2d);
            transform: perspective(200px) rotateY(0deg);
            z-index: 2;
        }

        /* EN button is now behind */
        .lang-btn-en {
            background: linear-gradient(45deg, #1a2a6c, #2a5298);
            transform: perspective(200px) rotateY(180deg);
            z-index: 1;
        }

        .lang-btn-flipped {
            transform: perspective(200px) rotateY(180deg);
            z-index: 1;
        }

        .lang-btn-unflipped {
            transform: perspective(200px) rotateY(0deg);
            z-index: 2;
        }

        .navbar-nav {
            align-items: center;
        }

        /* Removed RTL/LTR specific styles */
    </style>
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm border-bottom box-shadow">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index" data-en="GYMappWeb" data-ar="GYMappWeb">GYMappWeb</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                        aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav ms-auto">
                        <li class="nav-item">
                            <div class="lang-toggle-container">
                                <!-- AR button is now first in the stacking order -->
                                <button class="lang-btn lang-btn-ar" id="lang-btn-ar">AR</button>
                                <button class="lang-btn lang-btn-en" id="lang-btn-en">EN</button>
                            </div>
                        </li>
                        @* <li class="nav-item">
                            <a class="nav-link" href="/Identity/Account/Register" data-en="Login" data-ar="Login">Login</a>
                        </li> *@
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    <main class="container mt-4 animate-container">
        @RenderBody()
    </main>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
    <partial name="_Animations" />

    <script>
        // Language toggle functionality
        const langBtnEn = document.getElementById('lang-btn-en');
        const langBtnAr = document.getElementById('lang-btn-ar');
        let currentLanguage = 'ar'; // Start with Arabic as the front button

        function toggleLanguage() {
            langBtnEn.classList.toggle('lang-btn-flipped');
            langBtnEn.classList.toggle('lang-btn-unflipped');
            langBtnAr.classList.toggle('lang-btn-flipped');
            langBtnAr.classList.toggle('lang-btn-unflipped');

            // Toggle language
            currentLanguage = currentLanguage === 'en' ? 'ar' : 'en';

            // Update the UI language
            setLanguage(currentLanguage);

            // Set the language cookie or localStorage
            document.cookie = `preferredLanguage=${currentLanguage};path=/;max-age=31536000`;
            localStorage.setItem('preferredLanguage', currentLanguage);

            // Here you would typically also change the actual language of your site
            console.log('Language changed to: ' + currentLanguage);
        }

        function setLanguage(lang) {
            // Removed text direction change

            // Update page title if available
            const titleElement = document.querySelector('title');
            if (titleElement) {
                const newTitle = titleElement.getAttribute(`data-${lang}`) || titleElement.textContent;
                titleElement.textContent = newTitle;
            }

            // Update all elements with data attributes for translation
            document.querySelectorAll('[data-en], [data-ar]').forEach(element => {
                if (element.getAttribute(`data-${lang}`)) {
                    element.textContent = element.getAttribute(`data-${lang}`);
                }
            });

            // You would typically make an API call here to get the full resource file
            // and update all text content on the page
            updateContentFromResourceFile(lang);
        }

        function updateContentFromResourceFile(lang) {
            // This is a placeholder for your actual resource file implementation
            // In a real application, you would fetch the resource file for the selected language
            // and update all text content on the page

            console.log(`Loading resource file for language: ${lang}`);
        }

        // Check for saved language preference
        function loadLanguagePreference() {
            const savedLanguage = localStorage.getItem('preferredLanguage') ||
                                 getCookie('preferredLanguage') ||
                                 navigator.language.split('-')[0];

            if (savedLanguage === 'ar' && currentLanguage !== 'ar') {
                // If saved language is Arabic but UI is showing English, toggle
                toggleLanguage();
            }
        }

        function getCookie(name) {
            const value = `; ${document.cookie}`;
            const parts = value.split(`; ${name}=`);
            if (parts.length === 2) return parts.pop().split(';').shift();
        }

        langBtnEn.addEventListener('click', toggleLanguage);
        langBtnAr.addEventListener('click', toggleLanguage);

        // Load language preference when page loads
        document.addEventListener('DOMContentLoaded', loadLanguagePreference);
    </script>
</body>
</html>