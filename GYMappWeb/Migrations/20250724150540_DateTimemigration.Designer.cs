// <auto-generated />
using System;
using GYMappWeb.Areas.Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GYMappWeb.Migrations
{
    [DbContext(typeof(GYMappWebContext))]
    [Migration("20250724150540_DateTimemigration")]
    partial class DateTimemigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GYMappWeb.Models.TblMemberShipFreeze", b =>
                {
                    b.Property<int>("MemberShipFreezeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberShipFreeze_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberShipFreezeId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateOnly>("FreezeEndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FreezeStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserMemberShipId")
                        .HasColumnType("int")
                        .HasColumnName("UserMemberShip_ID");

                    b.HasKey("MemberShipFreezeId")
                        .HasName("PK_MemberShipFreeze");

                    b.HasIndex("UserMemberShipId");

                    b.ToTable("tbl_MemberShipFreeze", (string)null);
                });

            modelBuilder.Entity("GYMappWeb.Models.TblMembershipType", b =>
                {
                    b.Property<int>("MemberShipTypesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MemberShipTypes_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MemberShipTypesId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FreezeCount")
                        .HasColumnType("int");

                    b.Property<int>("MembershipDuration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("TotalFreezeDays")
                        .HasColumnType("int");

                    b.Property<int>("invitationCount")
                        .HasColumnType("int");

                    b.HasKey("MemberShipTypesId")
                        .HasName("PK_MembershipTypes");

                    b.ToTable("tbl_MembershipTypes", (string)null);
                });

            modelBuilder.Entity("GYMappWeb.Models.TblOffer", b =>
                {
                    b.Property<int>("OffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Off_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OffId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<int>("DiscountPrecentage")
                        .HasColumnType("int");

                    b.Property<int>("MemberShipTypesId")
                        .HasColumnType("int")
                        .HasColumnName("MemberShipTypes_ID");

                    b.Property<string>("OfferName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OffId")
                        .HasName("PK_Offers");

                    b.HasIndex("MemberShipTypesId");

                    b.ToTable("tbl_Offers", (string)null);
                });

            modelBuilder.Entity("GYMappWeb.Models.TblUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserCode")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK_Users");

                    b.HasIndex(new[] { "UserCode" }, "IX_tbl_UserCode")
                        .IsUnique();

                    b.HasIndex(new[] { "UserName" }, "IX_tbl_UserName")
                        .IsUnique();

                    b.ToTable("tbl_Users", (string)null);
                });

            modelBuilder.Entity("GYMappWeb.Models.TblUserMemberShip", b =>
                {
                    b.Property<int>("UserMemberShipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserMemberShip_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMemberShipId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2(0)");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MemberShipTypesId")
                        .HasColumnType("int")
                        .HasColumnName("MemberShipTypes_ID");

                    b.Property<int?>("OffId")
                        .HasColumnType("int")
                        .HasColumnName("Off_ID");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int?>("TotalFreezedDays")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("User_ID");

                    b.Property<int?>("invitationUsed")
                        .HasColumnType("int");

                    b.HasKey("UserMemberShipId")
                        .HasName("PK_UserMemberShip");

                    b.HasIndex("MemberShipTypesId");

                    b.HasIndex("OffId");

                    b.HasIndex("UserId");

                    b.ToTable("tbl_UserMemberShip", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GYMappWeb.Models.TblMemberShipFreeze", b =>
                {
                    b.HasOne("GYMappWeb.Models.TblUserMemberShip", "UserMemberShip")
                        .WithMany("TblMemberShipFreezes")
                        .HasForeignKey("UserMemberShipId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_MemberShipFreeze_tbl_UserMemberShip");

                    b.Navigation("UserMemberShip");
                });

            modelBuilder.Entity("GYMappWeb.Models.TblOffer", b =>
                {
                    b.HasOne("GYMappWeb.Models.TblMembershipType", "MemberShipTypes")
                        .WithMany("TblOffers")
                        .HasForeignKey("MemberShipTypesId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_Offers_tbl_MembershipTypes");

                    b.Navigation("MemberShipTypes");
                });

            modelBuilder.Entity("GYMappWeb.Models.TblUserMemberShip", b =>
                {
                    b.HasOne("GYMappWeb.Models.TblMembershipType", "MemberShipTypes")
                        .WithMany("TblUserMemberShips")
                        .HasForeignKey("MemberShipTypesId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_UserMemberShip_tbl_MembershipTypes");

                    b.HasOne("GYMappWeb.Models.TblOffer", "Off")
                        .WithMany("TblUserMemberShips")
                        .HasForeignKey("OffId")
                        .HasConstraintName("FK_tbl_UserMemberShip_tbl_Offers");

                    b.HasOne("GYMappWeb.Models.TblUser", "User")
                        .WithMany("TblUserMemberShips")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_tbl_UserMemberShip_tbl_Users");

                    b.Navigation("MemberShipTypes");

                    b.Navigation("Off");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GYMappWeb.Models.TblMembershipType", b =>
                {
                    b.Navigation("TblOffers");

                    b.Navigation("TblUserMemberShips");
                });

            modelBuilder.Entity("GYMappWeb.Models.TblOffer", b =>
                {
                    b.Navigation("TblUserMemberShips");
                });

            modelBuilder.Entity("GYMappWeb.Models.TblUser", b =>
                {
                    b.Navigation("TblUserMemberShips");
                });

            modelBuilder.Entity("GYMappWeb.Models.TblUserMemberShip", b =>
                {
                    b.Navigation("TblMemberShipFreezes");
                });
#pragma warning restore 612, 618
        }
    }
}
